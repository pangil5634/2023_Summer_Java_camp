# E01 - 입력한 숫자 크기의 정사각형 출력

숫자를 하나 입력받은 후에 이 숫자만큼의 크기를 갖는 정사각형을 '#' 문자로 화면에 출력하라. 예를 들어 10을 입력하면 10개의 '#' 문자가 들어있는 라인 10개를 출력하는 것이다. 

변수는 다음과 같이 사용하라. 

int length; // 입력받은 정사각형 한 변의 길이 

int i, j; // 반복문 사용을 위한 변수 

```
Enter a length of rectangle > 10
# # # # # # # # # # 
# # # # # # # # # # 
# # # # # # # # # # 
# # # # # # # # # # 
# # # # # # # # # # 
# # # # # # # # # # 
# # # # # # # # # # 
# # # # # # # # # # 
# # # # # # # # # # 
# # # # # # # # # # 
```

```
Enter a length of rectangle > 20
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
# # # # # # # # # # # # # # # # # # # # 
```

------------------------------------------------------------------------------------------------

# E02 - 입력한 숫자 크기의 높이를 갖는 우직각 삼각형 출력하기

높이와 여백을 정하는 숫자 두 개를 입력받은 후에 이 숫자만큼의 높이와 왼쪽 여백을 갖는 우직각 삼각형을 '*' 문자로 화면에 출력하라. 예를 들어 10을 입력하면 첫 줄에는 1개, 2번째 줄에는 2개, 3번째 줄에는 3 개, .. 10번째 줄에는 10개의 '*' 을 왼쪽 여백을 가진 우측 정렬된 모습으로 출력하는 것이다. 

변수는 다음과 같이 사용하라. 

int height; // 입력받은 높이 

int blank; // 입력받은 여백 크기 

int i, j; // 반복문 사용을 위한 변수 


실행 예)

```
Enter a height of right triangle and black > 20 10
                             *
                            **
                           ***
                          ****
                         *****
                        ******
                       *******
                      ********
                     *********
                    **********
                   ***********
                  ************
                 *************
                **************
               ***************
              ****************
             *****************
            ******************
           *******************
          ********************
```

------------------------------------------------------------------------------------------------

 # E03 - 입력한 숫자 크기의 높이를 갖는 이등변 삼각형 출력하기

숫자를 하나 입력받은 후에 이 숫자만큼의 높이를 갖는 이등변삼각형을 '*' 문자로 화면에 출력하라. 예를 들어 10을 입력하면 첫 줄에는 1개, 2번째 줄에는 3개, 3번째 줄에는 5개, ..., 10번째 줄에는 19개의 '*' 을 가운데 정렬한 모습으로 출력하는 것이다. 

변수는 다음과 같이 사용하라. 

height // 입력받은 높이 

i, j // 반복문 사용을 위한 변수 

```
Enter a height of triangle > 20
                   *
                  ***
                 *****
                *******
               *********
              ***********
             *************
            ***************
           *****************
          *******************
         *********************
        ***********************
       *************************
      ***************************
     *****************************
    *******************************
   *********************************
  ***********************************
 *************************************
***************************************
```

------------------------------------------------------------------------------------------------

# E04 - 홀수단 또는 짝수단의 구구단 출력하기

출력모드(홀수 또는 짝수)를 입력받아 이에 따라 홀수단 또는 짝수단의 구구단 만을 1줄에 3개씩 출력하라. 단, 출력모드 입력 내용이 1이면 홀수단, 2이면 짝수단으로 결정하도록 한다. 

변수는 다음과 같이 사용하라. 

int mode; // 출력모드(1: 홀수단, 2: 짝수단) 

int i, j; // 반복문 사용을 위한 변수 

```
Enter a type of gugudan (1: odd, 2: even) > 1
3 X 1 = 3       3 X 2 = 6       3 X 3 = 9
3 X 4 = 12      3 X 5 = 15      3 X 6 = 18
3 X 7 = 21      3 X 8 = 24      3 X 9 = 27

5 X 1 = 5       5 X 2 = 10      5 X 3 = 15
5 X 4 = 20      5 X 5 = 25      5 X 6 = 30
5 X 7 = 35      5 X 8 = 40      5 X 9 = 45

7 X 1 = 7       7 X 2 = 14      7 X 3 = 21
7 X 4 = 28      7 X 5 = 35      7 X 6 = 42
7 X 7 = 49      7 X 8 = 56      7 X 9 = 63

9 X 1 = 9       9 X 2 = 18      9 X 3 = 27
9 X 4 = 36      9 X 5 = 45      9 X 6 = 54
9 X 7 = 63      9 X 8 = 72      9 X 9 = 81
```

```
Enter a type of gugudan (1: odd, 2: even) > 2
2 X 1 = 2       2 X 2 = 4       2 X 3 = 6
2 X 4 = 8       2 X 5 = 10      2 X 6 = 12
2 X 7 = 14      2 X 8 = 16      2 X 9 = 18

4 X 1 = 4       4 X 2 = 8       4 X 3 = 12
4 X 4 = 16      4 X 5 = 20      4 X 6 = 24
4 X 7 = 28      4 X 8 = 32      4 X 9 = 36

6 X 1 = 6       6 X 2 = 12      6 X 3 = 18
6 X 4 = 24      6 X 5 = 30      6 X 6 = 36
6 X 7 = 42      6 X 8 = 48      6 X 9 = 54

8 X 1 = 8       8 X 2 = 16      8 X 3 = 24
8 X 4 = 32      8 X 5 = 40      8 X 6 = 48
8 X 7 = 56      8 X 8 = 64      8 X 9 = 72
```



------------------------------------------------------------------------------------------------

# E05 - 홀수단 또는 짝수단의 구구단의 열의 개수를 맞추어 출력하기

출력모드(홀수 또는 짝수)와 열 갯수를 입력받아 이에 따라 홀수 단 또는 짝수 단의 구구단만을 1줄에 열 개수만큼씩 출력하라. 

단, 출력모드 입력 내용이 1이면 홀수단, 2이면 짝수단으로 결정하도록 한다. 

변수는 다음과 같이 사용하라. 

int mode; // 출력모드(1: 홀수단, 2: 짝수단) 

int column; // 열 개수 

int i, j; // 반복문 사용을 위한 변수 

```
Enter a type of gugudan (1: odd, 2: even) > 1
Enter a numbers of column > 4
3 X 1 = 3       3 X 2 = 6       3 X 3 = 9       3 X 4 = 12
3 X 5 = 15      3 X 6 = 18      3 X 7 = 21      3 X 8 = 24
3 X 9 = 27

5 X 1 = 5       5 X 2 = 10      5 X 3 = 15      5 X 4 = 20
5 X 5 = 25      5 X 6 = 30      5 X 7 = 35      5 X 8 = 40
5 X 9 = 45

7 X 1 = 7       7 X 2 = 14      7 X 3 = 21      7 X 4 = 28
7 X 5 = 35      7 X 6 = 42      7 X 7 = 49      7 X 8 = 56
7 X 9 = 63

9 X 1 = 9       9 X 2 = 18      9 X 3 = 27      9 X 4 = 36
9 X 5 = 45      9 X 6 = 54      9 X 7 = 63      9 X 8 = 72
9 X 9 = 81
```

------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------